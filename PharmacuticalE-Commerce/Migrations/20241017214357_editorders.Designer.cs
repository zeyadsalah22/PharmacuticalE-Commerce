// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PharmacuticalE_Commerce.Models;

#nullable disable

namespace PharmacuticalE_Commerce.Migrations
{
    [DbContext(typeof(PharmacySystemContext))]
    [Migration("20241017214357_editorders")]
    partial class editorders
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CategoryDiscount", b =>
                {
                    b.Property<int>("DiscountId")
                        .HasColumnType("int")
                        .HasColumnName("discountId");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("categoryId");

                    b.HasKey("DiscountId", "CategoryId")
                        .HasName("PK__Category__402FA57B117933E4");

                    b.HasIndex(new[] { "CategoryId" }, "IX_CategoryDiscount_categoryId");

                    b.ToTable("CategoryDiscount", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Models.Attendance", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("recordId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordId"));

                    b.Property<DateTime>("AttendedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("attendedAt");

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("branchId");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employeeId");

                    b.Property<DateTime?>("LeftAt")
                        .HasColumnType("datetime")
                        .HasColumnName("leftAt");

                    b.Property<int>("ShiftId")
                        .HasColumnType("int")
                        .HasColumnName("shiftId");

                    b.HasKey("RecordId")
                        .HasName("PK__Attendan__D825195E107E2F41");

                    b.HasIndex(new[] { "BranchId" }, "IX_Attendance_branchId");

                    b.HasIndex(new[] { "EmployeeId" }, "IX_Attendance_employeeId");

                    b.HasIndex(new[] { "ShiftId" }, "IX_Attendance_shiftId");

                    b.ToTable("Attendance", (string)null);
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Models.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("branchId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address");

                    b.HasKey("BranchId")
                        .HasName("PK__Branch__751EBD5F933FEB49");

                    b.ToTable("Branch", (string)null);
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cartId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("userId");

                    b.HasKey("CartId")
                        .HasName("PK__Cart__415B03B8E7458263");

                    b.HasIndex(new[] { "UserId" }, "IX_Cart_userId");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Models.CartItem", b =>
                {
                    b.Property<int>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("cartId");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("productId");

                    b.Property<bool>("IsSelected")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("isSelected");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("CartId", "ProductId")
                        .HasName("PK__CartItem__F38A0EAE461C9600");

                    b.HasIndex(new[] { "ProductId" }, "IX_CartItem_productId");

                    b.ToTable("CartItem", (string)null);
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("categoryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("parentCategoryId");

                    b.HasKey("CategoryId")
                        .HasName("PK__Category__23CAF1D854A9661D");

                    b.HasIndex(new[] { "ParentCategoryId" }, "IX_Category_parentCategoryId");

                    b.HasIndex(new[] { "Name" }, "UQ__Category__72E12F1B99F0194C")
                        .IsUnique();

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Models.Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("discountId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("endDate");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("startDate");

                    b.Property<decimal?>("ValuePct")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("valuePct");

                    b.HasKey("DiscountId")
                        .HasName("PK__Discount__D2130A66C0C1F387");

                    b.ToTable("Discount", (string)null);
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("employeeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("branchId");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("FirstDay")
                        .HasColumnType("datetime")
                        .HasColumnName("firstDay");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fname");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("lname");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("password");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("roleId");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("salary");

                    b.Property<int>("ShiftId")
                        .HasColumnType("int")
                        .HasColumnName("shiftId");

                    b.HasKey("EmployeeId")
                        .HasName("PK__Employee__C134C9C190EC8A1A");

                    b.HasIndex("ShiftId");

                    b.HasIndex(new[] { "BranchId" }, "IX_Employee_branchId");

                    b.HasIndex(new[] { "RoleId" }, "IX_Employee_roleId");

                    b.HasIndex(new[] { "Email" }, "UQ__Employee__AB6E6164DA1FA5B2")
                        .IsUnique();

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("orderId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("addressId");

                    b.Property<int>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("cartId");

                    b.Property<DateTime?>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("orderDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PromoCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("promoCode");

                    b.Property<decimal?>("ShippingPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("shippingPrice");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("totalAmount");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("userId");

                    b.HasKey("OrderId")
                        .HasName("PK__Order__0809335DE1283F0A");

                    b.HasIndex(new[] { "AddressId" }, "IX_Order_addressId");

                    b.HasIndex(new[] { "CartId" }, "IX_Order_cartId");

                    b.HasIndex(new[] { "UserId" }, "IX_Order_userId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("productId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("categoryId");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Photo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("photo");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("serialNumber");

                    b.Property<int>("Stock")
                        .HasColumnType("int")
                        .HasColumnName("stock");

                    b.HasKey("ProductId")
                        .HasName("PK__Product__2D10D16AFD65A980");

                    b.HasIndex(new[] { "CategoryId" }, "IX_Product_categoryId");

                    b.HasIndex(new[] { "SerialNumber" }, "UQ__Product__3304A095B7795A78")
                        .IsUnique();

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Models.PromoCode", b =>
                {
                    b.Property<string>("PromoCode1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("promoCode");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int")
                        .HasColumnName("discountId");

                    b.Property<decimal?>("MaxDiscountAmount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("maxDiscountAmount");

                    b.Property<decimal?>("MinOrderAmount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("minOrderAmount");

                    b.HasKey("PromoCode1")
                        .HasName("PK__PromoCod__C7120D046F08FC51");

                    b.HasIndex(new[] { "DiscountId" }, "IX_PromoCode_discountId");

                    b.ToTable("PromoCode", (string)null);
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("roleId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.HasKey("RoleId")
                        .HasName("PK__Role__CD98462A06F08C1E");

                    b.HasIndex(new[] { "Title" }, "UQ__Role__E52A1BB3D70C0FA2")
                        .IsUnique();

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Models.SalaryLog", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("recordId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordId"));

                    b.Property<string>("ChangeType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("changeType");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employeeId");

                    b.Property<bool>("IsPermanent")
                        .HasColumnType("bit")
                        .HasColumnName("isPermanent");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("value");

                    b.HasKey("RecordId")
                        .HasName("PK__SalaryLo__D825195E34536BF0");

                    b.HasIndex(new[] { "EmployeeId" }, "IX_SalaryLog_employeeId");

                    b.ToTable("SalaryLog", (string)null);
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Models.Shift", b =>
                {
                    b.Property<int>("ShiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("shiftId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShiftId"));

                    b.Property<TimeOnly>("FromTime")
                        .HasColumnType("time")
                        .HasColumnName("fromTime");

                    b.Property<TimeOnly>("ToTime")
                        .HasColumnType("time")
                        .HasColumnName("toTime");

                    b.HasKey("ShiftId")
                        .HasName("PK__Shift__F2F06B02C04E4CA5");

                    b.ToTable("Shift", (string)null);
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Models.ShippingAddress", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("addressId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("isDefault");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("isDeleted");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("userId");

                    b.Property<string>("ZIP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressId")
                        .HasName("PK__Shipping__26A111AD63DA2C05");

                    b.HasIndex(new[] { "UserId" }, "IX_ShippingAddress_userId");

                    b.ToTable("ShippingAddress", (string)null);
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Fname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fname");

                    b.Property<string>("Lname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("lname");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__AB6E6164CA5F8C8F")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Models.UserCard", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cardId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CardId"));

                    b.Property<string>("CardNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("cardNo");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("expirationDate");

                    b.Property<string>("HolderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("holderName");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("isDeleted");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("userId");

                    b.HasKey("CardId", "CardNo")
                        .HasName("PK__UserCard__E98DAD82B96B04DE");

                    b.HasIndex(new[] { "UserId" }, "IX_UserCard_userId");

                    b.HasIndex(new[] { "CardNo" }, "UQ__UserCard__4D66913A9FD915EA")
                        .IsUnique();

                    b.ToTable("UserCard", (string)null);
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Viewmodels.LoginViewModel", b =>
                {
                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RememberMe")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("LoginViewModel");
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Viewmodels.RegisterViewModel", b =>
                {
                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("RegisterViewModel");
                });

            modelBuilder.Entity("ProductDiscount", b =>
                {
                    b.Property<int>("DiscountId")
                        .HasColumnType("int")
                        .HasColumnName("discountId");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("productId");

                    b.HasKey("DiscountId", "ProductId")
                        .HasName("PK__ProductD__60C20770C507E758");

                    b.HasIndex(new[] { "ProductId" }, "IX_ProductDiscount_productId");

                    b.ToTable("ProductDiscount", (string)null);
                });

            modelBuilder.Entity("CategoryDiscount", b =>
                {
                    b.HasOne("PharmacuticalE_Commerce.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__CategoryD__categ__01142BA1");

                    b.HasOne("PharmacuticalE_Commerce.Models.Discount", null)
                        .WithMany()
                        .HasForeignKey("DiscountId")
                        .IsRequired()
                        .HasConstraintName("FK__CategoryD__disco__00200768");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PharmacuticalE_Commerce.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PharmacuticalE_Commerce.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PharmacuticalE_Commerce.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PharmacuticalE_Commerce.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Models.Attendance", b =>
                {
                    b.HasOne("PharmacuticalE_Commerce.Models.Branch", "Branch")
                        .WithMany("Attendances")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK__Attendanc__branc__3D5E1FD2");

                    b.HasOne("PharmacuticalE_Commerce.Models.Employee", "Employee")
                        .WithMany("Attendances")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK__Attendanc__emplo__3B75D760");

                    b.Navigation("Branch");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Models.Cart", b =>
                {
                    b.HasOne("PharmacuticalE_Commerce.Models.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Cart__userId__5165187F");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Models.CartItem", b =>
                {
                    b.HasOne("PharmacuticalE_Commerce.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .IsRequired()
                        .HasConstraintName("FK__CartItem__cartId__656C112C");

                    b.HasOne("PharmacuticalE_Commerce.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__CartItem__produc__66603565");

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Models.Category", b =>
                {
                    b.HasOne("PharmacuticalE_Commerce.Models.Category", "ParentCategory")
                        .WithMany("InverseParentCategory")
                        .HasForeignKey("ParentCategoryId")
                        .HasConstraintName("FK__Category__parent__412EB0B6");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Models.Employee", b =>
                {
                    b.HasOne("PharmacuticalE_Commerce.Models.Branch", "Branch")
                        .WithMany("Employees")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK__Employee__branch__2F10007B");

                    b.HasOne("PharmacuticalE_Commerce.Models.Role", "Role")
                        .WithMany("Employees")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__Employee__roleId__2E1BDC42");

                    b.HasOne("PharmacuticalE_Commerce.Models.Shift", "Shift")
                        .WithMany("Employees")
                        .HasForeignKey("ShiftId")
                        .IsRequired()
                        .HasConstraintName("FK_Employee_Shift");

                    b.Navigation("Branch");

                    b.Navigation("Role");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Models.Order", b =>
                {
                    b.HasOne("PharmacuticalE_Commerce.Models.ShippingAddress", "Address")
                        .WithMany("Orders")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("FK__Order__addressId__70DDC3D8");

                    b.HasOne("PharmacuticalE_Commerce.Models.Cart", "Cart")
                        .WithMany("Orders")
                        .HasForeignKey("CartId")
                        .IsRequired()
                        .HasConstraintName("FK__Order__cartId__6EF57B66");

                    b.HasOne("PharmacuticalE_Commerce.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Order__userId__6FE99F9F");

                    b.Navigation("Address");

                    b.Navigation("Cart");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Models.Product", b =>
                {
                    b.HasOne("PharmacuticalE_Commerce.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__Product__categor__44FF419A");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Models.PromoCode", b =>
                {
                    b.HasOne("PharmacuticalE_Commerce.Models.Discount", "Discount")
                        .WithMany("PromoCodes")
                        .HasForeignKey("DiscountId")
                        .IsRequired()
                        .HasConstraintName("FK__PromoCode__disco__03F0984C");

                    b.Navigation("Discount");
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Models.SalaryLog", b =>
                {
                    b.HasOne("PharmacuticalE_Commerce.Models.Employee", "Employee")
                        .WithMany("SalaryLogs")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK__SalaryLog__emplo__32E0915F");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Models.ShippingAddress", b =>
                {
                    b.HasOne("PharmacuticalE_Commerce.Models.User", "User")
                        .WithMany("ShippingAddresses")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__ShippingA__userI__6B24EA82");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Models.UserCard", b =>
                {
                    b.HasOne("PharmacuticalE_Commerce.Models.User", "User")
                        .WithMany("UserCards")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__UserCard__userId__75A278F5");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProductDiscount", b =>
                {
                    b.HasOne("PharmacuticalE_Commerce.Models.Discount", null)
                        .WithMany()
                        .HasForeignKey("DiscountId")
                        .IsRequired()
                        .HasConstraintName("FK__ProductDi__disco__7C4F7684");

                    b.HasOne("PharmacuticalE_Commerce.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__ProductDi__produ__7D439ABD");
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Models.Branch", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Models.Cart", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Models.Category", b =>
                {
                    b.Navigation("InverseParentCategory");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Models.Discount", b =>
                {
                    b.Navigation("PromoCodes");
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Models.Employee", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("SalaryLogs");
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Models.Product", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Models.Role", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Models.Shift", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Models.ShippingAddress", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("PharmacuticalE_Commerce.Models.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("ShippingAddresses");

                    b.Navigation("UserCards");
                });
#pragma warning restore 612, 618
        }
    }
}
